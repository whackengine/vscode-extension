---
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: ActionScript 3
scopeName: source.as3

variables:
  unicodeEscape: >-
    (?:(?x) \\u((\{[A-Fa-f0-9]+\})|[A-Fa-f0-9]{4}))
  idStart: >-
    (?:(?x) [\p{L}$_\p{Nl}] | {{unicodeEscape}})
  idPart: >-
    (?:(?x) [\p{L}$_\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}] | {{unicodeEscape}})
  id: >-
    (?:(?x) {{idStart}} {{idPart}}* )

  # Based on https://github.com/microsoft/TypeScript-TmLanguage
  decimalNumber: |-
    (?<!\$)(?:
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*([f|F])?\b)| # 1.1E+3
      (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*([f|F])?\b)|             # 1.E+3
      (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*([f|F])?\b)|             # .1E+3
      (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*([f|F])?\b)|                 # 1E+3
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*([f|F])?\b)|                      # 1.1
      (?:\b[0-9][0-9_]*(\.)([f|F])?\B)|                                  # 1.
      (?:\B(\.)[0-9][0-9_]*([f|F])?\b)|                                  # .1
      (?:\b[0-9][0-9_]*([f|F])?\b(?!\.))                                 # 1
    )(?!\$)

  keywordAttribute: >-
    (?:(?x) public | private | protected | internal | final | static | dynamic | override | abstract)

  definitionKeyword: >-
    class|enum|interface|type|namespace|var|const|function|extends|implements|default\s+xml\s+namespace

patterns:
  - include: '#directive'

repository:
  directive:
    patterns:
      # Package definition start
      - match: (?x) \b(package) \s* ({{idStart}}{{idPart}}* \s* (\s*\.\s*{{idStart}}{{idPart}}*)*)\b
        captures:
          1: { name: keyword.other }
          2: { name: entity.name.other }
      # Package definition start
      - match: (?x) \b(package)\b
        captures:
          1: { name: keyword.other }
      # Labeled statement starting as in `labelname:`
      - match: >-
          (?x) \b({{id}})\s*:(?!:)
        captures:
          1: { name: entity.name.label }
      # Block
      - begin: \{
        end: \}
        beginCaptures:
          0: { name: punctuation.definition.block }
        endCaptures:
          0: { name: punctuation.definition.block }
        name: expression.group
        patterns:
          - include: '#directive'
      # Annotatable definition attributes
      - match: >-
          (?x) \b  (   (?:\s*(?!{{definitionKeyword}}\b){{id}}(?:\s*\.\s*{{id}})*)+   )  \s*  (?={{definitionKeyword}})\b
        captures:
          1: { name: keyword.other }
      # Getter or setter
      - begin: >-
          (?x) \b(function) \s+ (get|set) \s+ ({{id}}) \s* \(
        end: \)
        captures:
          1: { name: keyword.other }
          2: { name: keyword.other }
          3: { name: entity.name.function }
        patterns:
          - include: '#parameterList'
      # Class
      - match: >-
          (?x) \b(class) \s+ ({{id}})
        captures:
          1: { name: keyword.other }
          2: { name: entity.name.type.class }
      - match: >-
          (?x) \b(class)\b
        captures:
          1: { name: keyword.other }
      # Enum
      - match: >-
          (?x) \b(enum) \s+ ({{id}})
        captures:
          1: { name: keyword.other }
          2: { name: entity.name.type.enum }
      # Interface
      - match: >-
          (?x) \b(interface) \s+ ({{id}})
        captures:
          1: { name: keyword.other }
          2: { name: entity.name.type.interface }
      - match: >-
          (?x) \b(interface)\b
        captures:
          1: { name: keyword.other }
      # Type
      - match: >-
          (?x) \b(type) \s+ ({{id}})
        captures:
          1: { name: keyword.other }
          2: { name: entity.name.type }
      # Namespace
      - match: >-
          (?x) \b(namespace) \s+ ({{id}})
        captures:
          1: { name: keyword.other }
          2: { name: entity.name.other }
      # `extends` and `implements` keywords
      - match: \b(extends|implements)\b
        name: keyword.other
      # `return` followed by regex
      - begin: \b(return)\s*(/)
        end: >-
          (?x) /[A-Za-z]*\b
        name: string.regexp
      # `break` and `continue`
      - match: \b(break|continue)(\s+{{id}})?
        captures:
          1: keyword.control
          2: entity.name.label
      # Various control keywords
      - match: \b(if|else|for\s+each|for|return|throw|switch\s+type|switch|case|try|catch|finally)\b
        name: keyword.control
      # with
      - match: \b(with)\b
        name: keyword.other
      # default xml namespace =
      - match: \b(default\s+xml\s+namespace)\s*(=)
        captures:
          1: { name: keyword.other }
      # import or include
      - match: \b(import|include)\b
        name: keyword.other

      - include: '#expression'

  expression:
    patterns:
      - include: '#comment'

      # Variable definition (object destructuring)
      - begin: >-
          (?x) \b (var|const) \s* \{
        end: \}(\s*!)?
        captures:
          1: { name: keyword.other }
        patterns:
          - include: '#object'
      # Variable definition (array destructuring)
      - begin: >-
          (?x) \b (var|const) \s* \[
        end: \](\s*!)?
        captures:
          1: { name: keyword.other }
        patterns:
          - include: '#array'
      # Variable definition (non destructuring)
      - match: >-
          (?x) \b (var|const) \s+ ({{id}})\b
        captures:
          1: { name: keyword.other }
          2: { name: variable }
      - match: >-
          (?x) \b(var|const)\b
        captures:
          1: { name: keyword.other }
      # Function
      - begin: >-
          (?x) \b(function) \s+ ({{id}}) \s* \(
        end: \)
        captures:
          1: { name: keyword.other }
          2: { name: entity.name.function }
        patterns:
          - include: '#parameterList'
      - match: >-
          (?x) \b(function)\b
        name: keyword.other
      # Reserved namespaces
      - match: \b(public|private|protected|internal)\b
        name: keyword.other

  parameterList:
    patterns:
      - match: >-
          (?x) (?<=[,(] \s*) ({{id}})
        captures:
          1: { name: variable.parameter }
      - include: '#expression'

  object:
    patterns:
      - begin: >-
          (?x) {{id}} \s* :
        end: >-
          (?x) [,}]
        patterns:
          - include: '#expression'

      # Shorthand
      - match: >-
          (?x) ({{id}})
        captures:
          1: { name: variable }

      - include: '#expression'
  
  array:
    patterns:
      - include: '#expression'

  regex:
    patterns:
      - match: >-
          (?x) \.

  comment:
    patterns:
      - match: >-
          (?x) (//)(.*)
        name: comment.line
        captures:
          1: { name: punctuation.definition.comment }
      - begin: (/\*)
        beginCaptures:
          1: { name: punctuation.definition.comment }
        end: (\*/)
        endCaptures:
          1: { name: punctuation.definition.comment }
        name: comment.block